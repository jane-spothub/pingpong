<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Ping Pong - Home</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body class="home-body" >
<!-- üîπ Loader -->
<div id="loader">
    <div class="loader-content">
        <img src="/assets/img/pingpong-poster.png" alt="Loading Logo">
        <div class="progress-container">
            <div class="progress-bar" id="progress-bar"></div>
        </div>
        <p id="progress-text">Loading 0%</p>
    </div>
</div>

<!-- üîπ Main content -->
<div  id="main-content" style="display:none;">
    <header class="home-header">
        <img src="/assets/img/pingpong-poster.png" alt="Ping Pong Poster">
    </header>
<div>
    <div class="home-card">
        <h1 class="title">PING PONG</h1>
        <p class="instructions">Use your finger (or mouse) to move the racket and spin the ball. Get 7 points to win!</p>


        <div class="big-buttons">
            <a href="#" onclick="alert('Play vs friend not implemented here'); return false;" class="btn big">
                <span class="icon">üë§</span> PLAY VS. FRIEND
            </a>

            <a href="/bot" class="btn big">
                <span class="icon">ü§ñ</span> PLAY VS. BOT
            </a>
        </div>
        <button id="btnHowToPlay"  class="btn how-to">‚ñ∂ HOW TO PLAY</button>

    </div>
</div>

</div>

<div id="howToPlay" class="container how-to-play hidden">
    <h1>How to Play</h1>
    <div class="steps">
        <div class="step">
            <span class="icon">üéÆ</span>
            <p>Use <strong>Arrow Keys</strong> (or drag on mobile) to move your paddle left, right, forward, and backward.</p>
        </div>
        <div class="step">
            <span class="icon">üèì</span>
            <p>Hit the ball back across the table before it bounces past your side.</p>
        </div>
        <div class="step">
            <span class="icon">‚≠ê</span>
            <p>First to <strong>3 points</strong> wins a round. Best of <strong>3 rounds</strong> wins the match.</p>
        </div>
        <div class="step">
            <span class="icon">ü§ñ</span>
            <p>Choose a difficulty level to adjust the bot‚Äôs speed and skill.</p>
        </div>
    </div>

<!--    <button id="btnPlayNow" class="btn big">Start Playing</button>-->
    <button id="btnBackHome" class="btn">Back to Home</button>
</div>

<script>
    document.querySelector(".btn.how-to").addEventListener("click", () => {
        document.querySelector("#main-content").classList.add("hidden");
        document.querySelector("#howToPlay").classList.remove("hidden");
    });


    document.getElementById("btnBackHome").addEventListener("click", () => {
        document.querySelector("#howToPlay").classList.add("hidden");
        document.querySelector("#home").classList.remove("hidden");
    });
    //
    // document.getElementById("btnPlayNow").addEventListener("click", () => {
    //     document.querySelector("#howToPlay").classList.add("hidden");
    //     document.querySelector("#overlay").classList.add("active");
    // });
</script>
<script>


    document.addEventListener("DOMContentLoaded", () => {
        const progressBar = document.getElementById("progress-bar");
        const progressText = document.getElementById("progress-text");
        const loader = document.getElementById("loader");
        const mainContent = document.getElementById("main-content");

        // üîπ Assets to preload
        const assets = [
            "assets/img/player-paddle.png",
            "assets/img/bot-paddle.png",
            "assets/img/pingpong-poster.png",
            "assets/audio/paddle-hit-ball.wav",
            "assets/audio/ball-hit-table.wav",
            "assets/audio/score.wav",
            "assets/audio/win-sound.wav",
            "assets/audio/lose.wav"
        ];

        let loaded = 0;

        function updateProgress() {
            loaded++;
            const percent = Math.round((loaded / assets.length) * 100);
            progressBar.style.width = percent + "%";
            progressText.textContent = "Loading " + percent + "%";

            if (loaded === assets.length) {
                loader.classList.add("fade-out");
                setTimeout(() => {
                    loader.style.display = "none";
                    mainContent.style.display = "block";
                }, 800);
            }
        }

        function preloadImage(src) {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = () => { updateProgress(); resolve(); };
                img.onerror = () => { updateProgress(); resolve(); };
                img.src = src;
            });
        }

        function preloadAudio(src) {
            return new Promise((resolve) => {
                const audio = new Audio();
                audio.oncanplaythrough = () => { updateProgress(); resolve(); };
                audio.onerror = () => { updateProgress(); resolve(); };
                audio.src = src;
                audio.load();
            });
        }

        // üîπ Start preloading all
        Promise.all(
            assets.map(src =>
                src.endsWith(".png") ? preloadImage(src) : preloadAudio(src)
            )
        ).then(() => console.log("‚úÖ All assets preloaded"));
    });
</script>


</body>
</html>
