<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Ping Pong - Home</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body class="home-body" >
<!-- 🔹 Loader -->
<div id="loader">
    <div class="loader-content">
        <img src="/assets/img/pingpong-loader.png" alt="Loading Logo">
        <div class="progress-container">
            <div class="progress-bar" id="progress-bar"></div>
        </div>
        <p id="progress-text">Loading 0%</p>
    </div>
</div>

    <div id="gameContainer">
        <canvas id="gameHomePaddle"></canvas>

        <!-- Left Menu -->
        <div class="side-menu left">
            <div class="menu-btn">
               <div class="menu-btn-icon">🏆 </div>
                Challenge
            </div>
            <div class="menu-btn">
                <div class="menu-btn-icon">🎁 </div>
                Daily
            </div>
            <div class="menu-btn">
                <div class="menu-btn-icon">💎</div>
                Shop
            </div>
        </div>

        <!-- Right Menu -->
        <div class="side-menu right">
            <div class="menu-btn">
              <div class="menu-btn-icon">🏓</div>
                Upgrade
            </div>
            <div class="menu-btn">
                <div class="menu-btn-icon">🎖️ </div>
                Awards
            </div>
            <div class="menu-btn">
                <div class="menu-btn-icon">⚙️</div>
                Settings
            </div>
        </div>

        <!-- Progress Display -->
        <div id="progressHomeBar">
            <span id="xp-display">XP: 0 | Lvl: 1</span>
            <span id="coins-display">💰 0</span>
        </div>
<!--        bottom pad-->
        <a id="btnPlay" href="/bot" class="btn big">
            ▶ PLAY
        </a>

    </div>


<div id="howToPlay" class="container how-to-play hidden">
    <h1>How to Play</h1>
    <div class="steps">
        <div class="step">
            <span class="icon">🎮</span>
            <p>Use <strong>Arrow Keys</strong> (or drag on mobile) to move your paddle left, right, forward, and backward.</p>
        </div>
        <div class="step">
            <span class="icon">🏓</span>
            <p>Hit the ball back across the table before it bounces past your side.</p>
        </div>
        <div class="step">
            <span class="icon">⭐</span>
            <p>First to <strong>3 points</strong> wins a round. Best of <strong>3 rounds</strong> wins the match.</p>
        </div>
        <div class="step">
            <span class="icon">🤖</span>
            <p>Choose a difficulty level to adjust the bot’s speed and skill.</p>
        </div>
    </div>

<!--    <button id="btnPlayNow" class="btn big">Start Playing</button>-->
    <button id="btnBackHome" class="btn">Back to Home</button>
</div>
<script src="/js/paddlehome.js"></script>

<script>
    document.querySelector(".btn.how-to").addEventListener("click", () => {
        document.querySelector("#main-content").classList.add("hidden");
        document.querySelector("#howToPlay").classList.remove("hidden");
    });


    document.getElementById("btnBackHome").addEventListener("click", () => {
        document.querySelector("#howToPlay").classList.add("hidden");
        document.querySelector("#home").classList.remove("hidden");
    });
    //
    // document.getElementById("btnPlayNow").addEventListener("click", () => {
    //     document.querySelector("#howToPlay").classList.add("hidden");
    //     document.querySelector("#overlay").classList.add("active");
    // });
</script>
<script>
    async function fetchProgress() {
        try {
            const res = await fetch("/api/progress");
            const data = await res.json();

            // update UI
            document.getElementById("xp-display").textContent = `XP: ${data.xp} | Lvl: ${data.level}`;
            document.getElementById("coins-display").textContent = `💰 ${data.coins}`;
        } catch (err) {
            console.error("❌ Failed to fetch progress:", err);
        }
    }

    // 🔹 fetch immediately when page loads
    document.addEventListener("DOMContentLoaded", () => {
        fetchProgress();

        // 🔹 auto-refresh every 3s
        setInterval(fetchProgress, 3000);
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const progressBar = document.getElementById("progress-bar");
        const progressText = document.getElementById("progress-text");
        const loader = document.getElementById("loader");
        const mainContent = document.getElementById("main-content");

        // 🔹 Assets to preload
        const assets = [
            "assets/img/player-paddle.png",
            "assets/img/bot-paddle.png",
            "assets/img/pingpong-poster.png",
            "assets/audio/paddle-hit-ball.wav",
            "assets/audio/ball-hit-table.wav",
            "assets/audio/score.wav",
            "assets/audio/win-sound.wav",
            "assets/audio/lose.wav"
        ];

        let loaded = 0;

        function updateProgress() {
            loaded++;
            const percent = Math.round((loaded / assets.length) * 100);
            progressBar.style.width = percent + "%";
            progressText.textContent = "Loading " + percent + "%";

            if (loaded === assets.length) {
                loader.classList.add("fade-out");
                setTimeout(() => {
                    loader.style.display = "none";
                    mainContent.style.display = "block";
                }, 800);
            }
        }

        function preloadImage(src) {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = () => { updateProgress(); resolve(); };
                img.onerror = () => { updateProgress(); resolve(); };
                img.src = src;
            });
        }

        function preloadAudio(src) {
            return new Promise((resolve) => {
                const audio = new Audio();
                audio.oncanplaythrough = () => { updateProgress(); resolve(); };
                audio.onerror = () => { updateProgress(); resolve(); };
                audio.src = src;
                audio.load();
            });
        }

        // 🔹 Start preloading all
        Promise.all(
            assets.map(src =>
                src.endsWith(".png") ? preloadImage(src) : preloadAudio(src)
            )
        ).then(() => console.log("✅ All assets preloaded"));
    });
</script>


</body>
</html>
